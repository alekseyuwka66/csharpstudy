Lesson #2 -  СТРУКТУРА И ПОРЯДОК ВЫПОЛНЕНИЯ ПРОГРАММЫ;

CLI - jit (just in time) компилятор, который переводит язык, в машинный код.
CLR - Отвечает за утечку\сохранение памяти.
/Properties/AssemblyIngfo.cs - хранит инфомрацию для компиляции\сборки длл\ехе файла.
Ссылки - содержаться библиотеки для работы проекта.
app.config - размещаются даннные для конфигурации проекта.

Обязательное наличие Class`a в проекте, как основного элемента ООП #(ДАЛЕЕ В УРОКАХ)


Lesson #3 - ТИПЫ ДАННЫХ В C#;

Photo - C:\Users\Alekseyuwka\source\repos\lessons\lessons\типыданных.jpg
{
Существует различные типы данных, под каждые отводится опредленное кол-во памяти, а соответсвенно с каждым свои манипуляции.
Память соответсвенно увеличивается при увелечении объема.
Приставки -u\-s в числовых типах данных не имеют отрицательного занчения, но увеличивают макс значение положительного.
числовые с палвающей точкой увеличиваются соответсвенно с требованием точности значений.
символьный, символ юнокда\строка
логический, принимает true \ false
особые, object - можно поместить любой др. тип данных. dynamic = object, но можно менять в процессе, а не присваивать на постоянке.
} - классы и структуры из ООП (др. название\псевданим из #)
в случаи не известности типа данных, пишем var (тип данных определяется самостоятельно)         <-- C#Docs
др. название для .net 


Lesson #4 - ЧТО ТАКОЕ ПЕРЕМЕННАЯ В C# | ОБЪЯВЛЕНИЕ И ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ | ПРИСВОЕНИЕ ЗНАЧЕНИЙ;

любая переменная должна являться именованным объектом 
(обязательно имя для переменной, чтобы обращаться к оперативной памяти (достать\положить\операция))
объявление = создание (Тип_данных имя_переменной;)

инициализация перменных - если присваем значение !!1ый раз!!.
"=" - оператор присваевания.
# - !!не!! позволяет вывести не инициализированную пермененную.
переменные можно объявлять группой\по одиночке int a; int b; \ int a,b;

одинаково объявленных переменных не может быть в одной области видимости. bool variable = true; bool variable = false;
так же среда разработки различает регистр (регистрозависимая) (не использовать, не прочтешь потом сам)
помещать значение в переменную можно несколько раз (ссылка 34-40)


Lesson #5 - C# ВВОД ДАННЫХ В КОНСОЛЬ;

"+" в работах со строками метода Console.WriteLine() - конкатенция.

в # строки и символы находятся в кодировки unicode


Lesson #6 - C# КОНВЕРТАЦИЯ СТРОКИ В ЧИСЛО | C# КЛАСС CONVERT;

Конвертация одного типа данных в др. != приведение типов.
Class Convert - конвертирует один тип данных в др.

при конкатенации string + int в консоли, int автоматически приводится к типу string.

существует проблема с "." и "," в дробных числах.
а именно проблема при конвертации string в decimal\float\double
Для этого неопходимо подключить пространство имен system.globalization
класс numberformatinfo и создать экземпляр объекта;
и далее через Numberdecimalseparator указать тип разделителя.

Class Convert содержит в себе метод Parse\TryParse


Lesson 7 - C# ПРЕОБРАЗОВАНИЕ СТРОК | PARSE STRING | TRYPARSE STRING;

Parse - более узконаправленный, именно на string, нежели Convert.

TryParse - не бросает исключений. out, иницизализирует и возвращает переменную
Логика - пытается распарсить строку, в случае не возможнсти, оставляет переменную
и инициализирует ее значением по умолчанию.


Lesson 8 - ОПЕРАТОРЫ. АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ С ЧИСЛАМИ В C#;

Оператор производит операцию над данными (операндами).
операторы - унарные\бинарные\тернарные 
(зависит от того сколько нужно операнд, что провести операций)
Из числовых операций - (+|-|\|*|%) % - деление по модулю (остаток по делению)


Lesson 9 - ПРИОРИТЕТ АРИФМЕТИЧЕСКИХ ОПЕРАЦИЙ C#;

Все как в математике


Lesson 10 -  НЕСКОЛЬКО ПРОЕКТОВ В ОДНОМ РЕШЕНИИ;

Solution - решение - элемент который связывает под элементы между собой \ папка
Проект - состовляющая часть решения

В свойствах решения можно указать какие проекты запускать

Lesson 11 - ИНКРЕМЕНТ И ДЕКРЕМЕНТ | ПОСТФИКСНЫЙ И ПРЕФИКСНЫЙ;

Инкремент\декремент - унарные арифм. операциях (унарный - т.к. только над 1ой операндой)

постфиксная\префиксаня - после операнды\перед операндой
постфиксная - наименьший приоритет
префиксная - наибольший приоритет
Результат p++ и p-- — это значение p перед операцией. 
Результат ++p и --p — это значение p после операции.          <- C#docs


Lesson 12 - ОПЕРАЦИИ СРАВНЕНИЯ | ОПЕРАТОРЫ ОТНОШЕНИЯ;
{
== равно
!= не равно
> больше
< меньше
>= больше\равно
<= меньше\равно
} 
возвращают булевый рез-тат


Lesson 13 - IF ELSE C# | КОНСТРУКЦИЯ ЛОГИЧЕСКОГО ВЫБОРА | ВЕТВЛЕНИЕ В C#;

if (утверждение или выражение) { - так или иначе возвращает bool результат
	действие 1;
}
else {
	действие 2;
}


Lesson 14 - ЛОГИЧЕСКИЕ ОПЕРАТОРЫ C# | СОКРАЩЁННЫЕ ЛОГИЧЕСКИЕ ОПЕРАЦИИ;

Логические операторы

&& Сокращенное И (Если уже не удовлетворяет условию, то след не проверяет)
|| Сокращенное ИЛИ (Если уже удовлетворяет условию, то след не проверяет)
& И   (Проверяет все операнды)
| ИЛИ (Проверяет все операнды)
! НЕ  


Lesson 15 - SWITCH C# | ЧТО ЭТО | ПРИМЕР | СИНТАКСИС | ОПЕРАТОР МНОЖЕСТВЕННОГО ВЫБОРА;

switch (переменная)
            {
                case 1:
                    тело;
                    break;
                case 2:
                    тело;
                    break;
                default:
                    тело если не попали ни в 1 кейс;
                    break;
            }


Lesson 16 - ЦИКЛ WHILE | ЧТО ЭТО | КАК РАБОТАЕТ;

Цель циклов - выполнять действия, пока не будет достигнут конкретный результат

while (условие)
            {
                тело цикла
            }

проверяет условие, а потом выполняет действие.


Lesson 17 - ЦИКЛ DO WHILE | ЧТО ЭТО | КАК РАБОТАЕТ;

do 
{

} while (условие)

сначало выполняет дейсвтие, а потом проверяет на условие.


Lesson 18 - C# ЦИКЛ FOR;

for (объявление итератора, условие, инкремента )
{
    тело цикла
}


Lesson 19 - C# ЦИКЛ FOR | В ОБРАТНОМ ПОРЯДКЕ | НЕСКОЛЬКО ПЕРЕМЕННЫХ | НЕСКОЛЬКО УСЛОВИЙ;

Lesson19.cs


Lesson 20 - КЛЮЧЕВОЕ СЛОВО BREAK | ОПЕРАТОР BREAK | ПРИМЕР | СИНТАКСИС;

break - прерывает цикл.
применение: в случае когда получили необходимый результат, и нет смысла проходить оставшиеся итерации


Lesson 21 - КЛЮЧЕВОЕ СЛОВО CONTINUE| ОПЕРАТОР CONTINUE | ПРИМЕР;

continue - используется, чтобы пропустить итерацию цикла, невыходя из него


Lesson 22 - ВЛОЖЕННЫЕ ЦИКЛЫ | КАК РАБОТАЮТ | ПРИМЕР;

используется для перебора двумерных массивов, работа с данными в ооп, где список в списке


Lesson 23 - ТЕРНАРНЫЙ ОПЕРАТОР | ЧТО ЭТО | ПРИМЕР | КАК ИСПОЛЬЗОВАТЬ;

тернарный - выполняет операцию над 3мя операндами. (унарный, бинарный, тернарный)

[первый операнд - условие] ? [второй операнд if_true] : [третий операнд if_false]


Lesson 24 - ЧТО ТАКОЕ МАССИВЫ | ОДНОМЕРНЫЙ МАССИВ C# ПРИМЕРЫ;

Массив - совокупность элементов одного типа (коллекция одних данных)

Доступ через указание индекса
Многоэтажка с номером квартиры

Ссылочный тип - данные выделяются в управляемой куче (Сущ-ет значимый и слычной тип в целом в #. Изучение далее в уроках)
При объявлении возвращает null, т.к. не начто ссылаться. (подобие пустого ярлыка в винде)

Тип_элементов_массива [] имя_массива

Ссылка в четких пределаг границ массива (Execpiton indexoutofrange)


Lesson 25 - ИНИЦИАЛИЗАЦИЯ МАССИВА | СПОСОБЫ | СИ ШАРП | C# ПРИМЕРЫ;

Lesson25.cs


Lesson 26 - ВЫВОД МАССИВА | ПЕРЕБОР МАССИВА | МАССИВЫ И ЦИКЛЫ;










